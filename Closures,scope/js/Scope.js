"use strict";// Глобальный объект / Window и переменнаяif ("a" in window) {    var a = 1;}alert( a ); // ответ  1;// Глобальный объект / Window и переменная 2if ("a" in window) {    a = 1;}alert( a ); // переменная a не обьявлена в global windows, будет ошибка// Глобальный объект / Window и переменная 3if ("a" in window) {    a = 1;}var a;alert( a ); // a = 1;// Замыкания, функции изнутри / Что выведет say в начале кода?say('Вася'); // Что выведет? Не будет ли ошибки?var phrase = 'Привет';function say(name) {    alert( name + ", " + phrase ); // ответ (Вася, undefined  )}// Замыкания, функции изнутри / В какую переменную будет присвоено значение?var value = 0;function f() {    if (1) {        value = true;    } else {        var value = false;    }    alert( value );}f(); // true// Замыкания, функции изнутри / var windowfunction test() {    alert( window );    var window = 5;    alert( window );}test(); // undefined, 5// Замыкания, функции изнутри / Вызов "на месте"var a = 5(function() {    alert(a)})()  // будет ошибка, webshtorm быстро показал что нету точки с зяпятой ^_^// Замыкания, функции изнутри / Перекрытие переменнойfunction makeCounter() {    var currentCount = 1;    return function() {        var currentCount;        // можно ли здесь вывести currentCount из внешней функции (равный 1)?    };}       // ответ - локальная накроект внешнуюю// Замыкания, функции изнутри / Глобальный счётчикvar currentCount = 1;function makeCounter() {    return function() {        return currentCount++;    };}var counter = makeCounter();var counter2 = makeCounter();alert( counter() ); // 1alert( counter() ); // 2alert( counter2() ); // 3alert( counter2() ); // 4// Локальные переменные для объекта / Сумма через замыканиеfunction sum(a) {    return function(b) {        return a + b;    };}sum(1)(2) = 3;sum(5)(-1) = 4;// Локальные переменные для объекта / Функция - строковый буферfunction makeBuffer() {    var text = '';    return function(piece) {        if (arguments.length == 0) {            return text;        }        text += piece;    };};var buffer = makeBuffer();// добавить значения к буферуbuffer('Замыкания');buffer(' Использовать');buffer(' Нужно!');alert( buffer() );var buffer2 = makeBuffer();buffer2(0);buffer2(1);buffer2(0);alert( buffer2() );// Локальные переменные для объекта / Сортировкаvar users = [{    name: "Вася",    surname: 'Иванов',    age: 20}, {    name: "Петя",    surname: 'Чапаев',    age: 25}, {    name: "Маша",    surname: 'Медведева',    age: 18}];function byField(field) {    return function(a, b) {        return a[field] > b[field] ? 1 : -1;    }}users.sort(byField('name'));users.forEach(function(user) {    alert( user.name );});users.sort(byField('age'));users.forEach(function(user) {    alert( user.name );});army[5](); // стрелок выводит 10...// Локальные переменные для объекта / Армия функцийfunction makeArmy() {    var shooters = [];    for (var i = 0; i < 10; i++)(function(i) {        var shooter = function() {            console.log( i );        };        shooters.push(shooter);    })(i);     return shooters;}var army = makeArmy();army[0](); // стрелок выводит 10, а должен 0army[1](); // стрелок выводит 10, а должен 0army[4](); // стрелок выводит 10, а должен 0